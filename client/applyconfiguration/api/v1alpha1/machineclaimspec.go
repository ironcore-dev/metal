// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/metal/api/v1alpha1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MachineClaimSpecApplyConfiguration represents an declarative configuration of the MachineClaimSpec type for use
// with apply.
type MachineClaimSpecApplyConfiguration struct {
	MachineRef        *v1.LocalObjectReference                         `json:"machineRef,omitempty"`
	MachineSelector   *metav1.LabelSelector                            `json:"machineSelector,omitempty"`
	Image             *string                                          `json:"image,omitempty"`
	Power             *v1alpha1.Power                                  `json:"power,omitempty"`
	IgnitionSecretRef *v1.LocalObjectReference                         `json:"ignitionSecretRef,omitempty"`
	NetworkInterfaces []MachineClaimNetworkInterfaceApplyConfiguration `json:"networkInterfaces,omitempty"`
}

// MachineClaimSpecApplyConfiguration constructs an declarative configuration of the MachineClaimSpec type for use with
// apply.
func MachineClaimSpec() *MachineClaimSpecApplyConfiguration {
	return &MachineClaimSpecApplyConfiguration{}
}

// WithMachineRef sets the MachineRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MachineRef field is set to the value of the last call.
func (b *MachineClaimSpecApplyConfiguration) WithMachineRef(value v1.LocalObjectReference) *MachineClaimSpecApplyConfiguration {
	b.MachineRef = &value
	return b
}

// WithMachineSelector sets the MachineSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MachineSelector field is set to the value of the last call.
func (b *MachineClaimSpecApplyConfiguration) WithMachineSelector(value metav1.LabelSelector) *MachineClaimSpecApplyConfiguration {
	b.MachineSelector = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *MachineClaimSpecApplyConfiguration) WithImage(value string) *MachineClaimSpecApplyConfiguration {
	b.Image = &value
	return b
}

// WithPower sets the Power field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Power field is set to the value of the last call.
func (b *MachineClaimSpecApplyConfiguration) WithPower(value v1alpha1.Power) *MachineClaimSpecApplyConfiguration {
	b.Power = &value
	return b
}

// WithIgnitionSecretRef sets the IgnitionSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IgnitionSecretRef field is set to the value of the last call.
func (b *MachineClaimSpecApplyConfiguration) WithIgnitionSecretRef(value v1.LocalObjectReference) *MachineClaimSpecApplyConfiguration {
	b.IgnitionSecretRef = &value
	return b
}

// WithNetworkInterfaces adds the given value to the NetworkInterfaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NetworkInterfaces field.
func (b *MachineClaimSpecApplyConfiguration) WithNetworkInterfaces(values ...*MachineClaimNetworkInterfaceApplyConfiguration) *MachineClaimSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworkInterfaces")
		}
		b.NetworkInterfaces = append(b.NetworkInterfaces, *values[i])
	}
	return b
}

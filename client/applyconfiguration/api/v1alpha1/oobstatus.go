// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/metal/api/v1alpha1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// OOBStatusApplyConfiguration represents an declarative configuration of the OOBStatus type for use
// with apply.
type OOBStatusApplyConfiguration struct {
	Type            *v1alpha1.OOBType                `json:"type,omitempty"`
	Manufacturer    *string                          `json:"manufacturer,omitempty"`
	SerialNumber    *string                          `json:"serialNumber,omitempty"`
	FirmwareVersion *string                          `json:"firmwareVersion,omitempty"`
	State           *v1alpha1.OOBState               `json:"state,omitempty"`
	Conditions      []v1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// OOBStatusApplyConfiguration constructs an declarative configuration of the OOBStatus type for use with
// apply.
func OOBStatus() *OOBStatusApplyConfiguration {
	return &OOBStatusApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *OOBStatusApplyConfiguration) WithType(value v1alpha1.OOBType) *OOBStatusApplyConfiguration {
	b.Type = &value
	return b
}

// WithManufacturer sets the Manufacturer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Manufacturer field is set to the value of the last call.
func (b *OOBStatusApplyConfiguration) WithManufacturer(value string) *OOBStatusApplyConfiguration {
	b.Manufacturer = &value
	return b
}

// WithSerialNumber sets the SerialNumber field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SerialNumber field is set to the value of the last call.
func (b *OOBStatusApplyConfiguration) WithSerialNumber(value string) *OOBStatusApplyConfiguration {
	b.SerialNumber = &value
	return b
}

// WithFirmwareVersion sets the FirmwareVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FirmwareVersion field is set to the value of the last call.
func (b *OOBStatusApplyConfiguration) WithFirmwareVersion(value string) *OOBStatusApplyConfiguration {
	b.FirmwareVersion = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *OOBStatusApplyConfiguration) WithState(value v1alpha1.OOBState) *OOBStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *OOBStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *OOBStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

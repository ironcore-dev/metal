// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/metal/api/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// MachineStatusApplyConfiguration represents an declarative configuration of the MachineStatus type for use
// with apply.
type MachineStatusApplyConfiguration struct {
	Manufacturer      *string                                     `json:"manufacturer,omitempty"`
	SKU               *string                                     `json:"sku,omitempty"`
	SerialNumber      *string                                     `json:"serialNumber,omitempty"`
	Power             *v1alpha1.Power                             `json:"power,omitempty"`
	LocatorLED        *v1alpha1.LED                               `json:"locatorLED,omitempty"`
	ShutdownDeadline  *v1.Time                                    `json:"shutdownDeadline,omitempty"`
	NetworkInterfaces []MachineNetworkInterfaceApplyConfiguration `json:"networkInterfaces,omitempty"`
	State             *v1alpha1.MachineState                      `json:"state,omitempty"`
	Conditions        []metav1.ConditionApplyConfiguration        `json:"conditions,omitempty"`
}

// MachineStatusApplyConfiguration constructs an declarative configuration of the MachineStatus type for use with
// apply.
func MachineStatus() *MachineStatusApplyConfiguration {
	return &MachineStatusApplyConfiguration{}
}

// WithManufacturer sets the Manufacturer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Manufacturer field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithManufacturer(value string) *MachineStatusApplyConfiguration {
	b.Manufacturer = &value
	return b
}

// WithSKU sets the SKU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SKU field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithSKU(value string) *MachineStatusApplyConfiguration {
	b.SKU = &value
	return b
}

// WithSerialNumber sets the SerialNumber field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SerialNumber field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithSerialNumber(value string) *MachineStatusApplyConfiguration {
	b.SerialNumber = &value
	return b
}

// WithPower sets the Power field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Power field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithPower(value v1alpha1.Power) *MachineStatusApplyConfiguration {
	b.Power = &value
	return b
}

// WithLocatorLED sets the LocatorLED field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocatorLED field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithLocatorLED(value v1alpha1.LED) *MachineStatusApplyConfiguration {
	b.LocatorLED = &value
	return b
}

// WithShutdownDeadline sets the ShutdownDeadline field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ShutdownDeadline field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithShutdownDeadline(value v1.Time) *MachineStatusApplyConfiguration {
	b.ShutdownDeadline = &value
	return b
}

// WithNetworkInterfaces adds the given value to the NetworkInterfaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NetworkInterfaces field.
func (b *MachineStatusApplyConfiguration) WithNetworkInterfaces(values ...*MachineNetworkInterfaceApplyConfiguration) *MachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworkInterfaces")
		}
		b.NetworkInterfaces = append(b.NetworkInterfaces, *values[i])
	}
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithState(value v1alpha1.MachineState) *MachineStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *MachineStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *MachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
